<%- include('../layouts/header') %>

<style>
  /* Base styles */
.checkout {
  padding: 50px 0;
}

.container {
  width: 100%;
  padding-right: 15px;
  padding-left: 15px;
  margin-right: auto;
  margin-left: auto;
}

/* Breadcrumb styles */
.breadcrumb-option {
  margin-bottom: 30px;
  background: #f5f5f5;
  padding: 15px 0;
}

.breadcrumb__links {
  display: flex;
  align-items: center;
  gap: 10px;
}

.breadcrumb__links a {
  color: #333;
  text-decoration: none;
}

.breadcrumb__links span {
  color: #666;
}

/* Coupon section */
.checkout__coupon {
  border: 1px solid #e1e1e1;
  padding: 20px;
  border-radius: 5px;
  margin-bottom: 30px;
}

.checkout__coupon h5 {
  margin-bottom: 15px;
  font-weight: 600;
}

.checkout__coupon input {
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
  margin-right: 10px;
  min-width: 200px;
}

.site-btn1 {
  background-color: rgb(172, 20, 20);
  color: white;
  border: none;
  border-radius: 20px;
  padding: 10px 20px;
  font-size: 16px;
  font-weight: bold;
  text-transform: uppercase;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.site-btn1:hover {
  background-color: rgb(142, 17, 17);
}

/* Address section */
.checkout__address {
  margin-bottom: 30px;
}

.checkout__address h5 {
  margin-bottom: 20px;
}

.checkout__address__details {
  border: 1px solid #ccc;
  border-radius: 5px;
  padding: 15px;
  margin-bottom: 15px;
  background-color: #f5f5f5;
  position: relative;
}

.checkout__address__details.active {
  background-color: lightblue;
  color: black;
  border-color: #4a90e2;
}

.address-option {
  margin-left: 25px;
}

.status-indicator-pill {
  font-size: 12px;
  padding: 5px 10px;
  border-radius: 15px;
  background-color: #6c757d;
  color: white;
}

.address-buttons {
  margin-top: 10px;
}

/* Order section */
.checkout__order {
  background-color: #f8f9fa;
  padding: 25px;
  border-radius: 5px;
  border: 1px solid #e1e1e1;
}

.checkout__order h5 {
  margin-bottom: 20px;
  font-weight: 600;
}

.checkout__order__product__list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.checkout__order__product__item {
  padding: 15px 0;
  border-bottom: 1px solid #e1e1e1;
}

.checkout__order__product__item:last-child {
  border-bottom: none;
}

.checkout__order__product__item__details {
  margin-bottom: 10px;
}

.checkout__order__total ul {
  list-style: none;
  padding: 0;
  margin: 20px 0;
}

.checkout__order__total ul li {
  display: flex;
  justify-content: space-between;
  padding: 10px 0;
  border-bottom: 1px solid #e1e1e1;
}

.strikethrough {
  text-decoration: line-through;
  color: red;
}

/* Payment Method Section */
.checkout__payment-method {
  margin: 25px 0;
}

.checkout__payment-method h5 {
  margin-bottom: 15px;
}

.checkout__payment-method label {
  display: flex;
  align-items: center;
  gap: 10px;
  margin: 10px 0;
  cursor: pointer;
}

.checkout__payment-method input[type="radio"] {
  margin-right: 10px;
}

/* Submit Button */
.site-btn {
  width: 100%;
  background-color: #4a90e2;
  color: white;
  border: none;
  border-radius: 20px;
  padding: 12px 25px;
  font-size: 16px;
  font-weight: bold;
  text-transform: uppercase;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.site-btn:hover {
  background-color: #357abd;
}

/* Alert Messages */
.alert {
  padding: 15px;
  margin-bottom: 20px;
  border-radius: 4px;
}

.alert-success {
  background-color: #d4edda;
  border-color: #c3e6cb;
  color: #155724;
}

.alert-danger {
  background-color: #f8d7da;
  border-color: #f5c6cb;
  color: #721c24;
}

/* Responsive Design */
@media (min-width: 992px) {
  .container {
    max-width: 960px;
  }
  
  .order-section {
    margin-top: -10rem;
  }
}

@media (min-width: 1200px) {
  .container {
    max-width: 1140px;
  }
}

@media (max-width: 991px) {
  .order-section {
    margin-top: 30px;
  }
  
  .col-lg-8,
  .col-lg-4 {
    width: 100%;
  }
}

@media (max-width: 768px) {
  .checkout {
    padding: 30px 0;
  }
  
  .checkout__coupon {
    flex-direction: column;
    align-items: stretch;
  }
  
  .checkout__coupon input {
    margin-bottom: 10px;
    width: 100%;
  }
  
  .checkout__coupon button {
    width: 100%;
    margin: 5px 0;
  }
  
  .address-buttons {
    position: static;
    text-align: left;
  }
  
  .checkout__address__details {
    padding: 15px;
  }
  
  .checkout__order {
    padding: 15px;
  }
}

@media (max-width: 576px) {
  .breadcrumb__links {
    font-size: 14px;
  }
  
  .checkout__coupon h5 {
    font-size: 16px;
  }
  
  .checkout__address__details {
    padding: 10px;
  }
  
  .status-indicator-pill {
    font-size: 11px;
    padding: 3px 8px;
  }
  
  .checkout__payment-method label img {
    width: 24px;
    height: 24px;
  }
  
  .checkout__order__product__item__details {
    font-size: 14px;
  }
  
  .site-btn,
  .site-btn1 {
    font-size: 14px;
    padding: 10px 15px;
  }
}

/* Utility Classes */
.mb-0 {
  margin-bottom: 0;
}

.btn {
  display: inline-block;
  font-weight: 400;
  text-align: center;
  vertical-align: middle;
  cursor: pointer;
  padding: 6px 12px;
  font-size: 14px;
  line-height: 1.5;
  border-radius: 4px;
  transition: all 0.15s ease-in-out;
}

.btn-primary {
  color: #fff;
  background-color: #007bff;
  border-color: #007bff;
}

.btn-danger {
  color: #fff;
  background-color: #dc3545;
  border-color: #dc3545;
}

.btn-sm {
  padding: 4px 8px;
  font-size: 12px;
  line-height: 1.5;
  border-radius: 3px;
}
</style>

<!-- Include SweetAlert CSS and JS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.all.min.js"></script>

<!-- Breadcrumb Begin -->
<div class="breadcrumb-option">
  <div class="container">
    <div class="row">
      <div class="col-lg-12">
        <div class="breadcrumb__links">
          <a href="/"><i class="fa fa-home"></i> Home</a>
          <a href="/cart">Shopping cart</a>
          <span>Checkout</span>
        </div>
      </div>
    </div>
  </div>
</div>
<!-- Breadcrumb End -->

<!-- Checkout Section Begin -->
<section class="checkout spad">
  <div class="container">
    <div class="row">
      <div class="col-lg-12">
        <form id="couponForm">
          <div class="checkout__coupon">
            <h5 style="font-weight: 600;">COUPON CODE</h5>
            <br>
            <input type="text" id="couponCode" name="couponCode" placeholder="Enter your coupon code" style="padding: 8px; border: 1px solid #ccc; border-radius: 4px;">
            <button type="button" class="site-btn1" onclick="applyCoupon()">Apply</button>
            <button type="button" class="site-btn1" style="background-color: rgb(100, 100, 100);" onclick="removeCoupon()">Remove</button>
          </div>
        </form>

        <br><br>
        <form action="/placeOrder" class="checkout__form" method="post">
          <div class="row">
            <div class="col-lg-8">
              <h5>Address</h5>
              <div class="checkout__address">
                <% if (messages.success) { %>
                  <div class="alert alert-success" role="alert" style="color: green;">
                    <%= messages.success %>
                  </div>
                <% } %>

                <% if (messages.error) { %>
                  <div class="alert alert-danger" role="alert" style="color: red;">
                    <%= messages.error %>
                  </div>
                <% } %>

                <% if (addressData.length > 0) { %>
                  <% addressData.forEach((address, index) => { %>
                    <div class="checkout__address__details" id="address<%= address._id %>">
                      <input type="radio" name="selectedAddress" value="<%= address._id %>" />
                      <div class="address-option">
                        <p>
                          <span style="font-weight: bold; color: #000;"><%= userData.name %></span>
                          <span class="status-indicator-pill <%= address.addresstype === 'work' ? 'badge badge-pill badge-secondary' : 'badge badge-pill badge-secondary' %>" style="margin-left: 10px; padding: 5px 10px;">
                            <%= address.addresstype === 'work' ? 'Work' : 'Home' %>
                          </span>
                        </p>
                        <p class="mb-0"><%= userData.name %>,<%= address.address %>,<%= address.locality %>,<%= address.city %>,</p>
                      <p class="mb-0" >Pincode : <%= address.pincode %></p>
                      <p class="mb-0" >Phone : <%= userData.mobile %> </p>
                      </div>
                      <div class="address-buttons">
                        <button type="button" class="btn btn-danger btn-sm" onclick="removeAddress('<%= address._id %>')">Remove</button>
                      </div>
                    </div>
                  <% }); %>
                <% } else { %>
                  <p>No addresses available. Please add an address.</p>
                <% } %>
                <button type="button" class="btn btn-primary" id="editAddressBtn" onclick="navigateToAddAddress(event)">Add Address</button>
                <br><br>
              </div>
            </div>
            <div class="col-lg-4 order-section">
              <div class="checkout__order">
                <h5>Your Order</h5>
                <div class="checkout__order__product">
                  <ul class="checkout__order__product__list">
                    <% cartItems.forEach(cartItem => { %>
                      <% cartItem.product.forEach(product => { %>
                        <li class="checkout__order__product__item">
                          <div class="checkout__order__product__item__details">
                            <div class="checkout__order__product__item__name">Name: <%= product.productId.name %></div>
                            <div class="checkout__order__product__item__price">Price: â‚¹ <%= (product.price * product.quantity).toFixed(2) %></div>
                            <div class="checkout__order__product__item__quantity">Quantity: <%= product.quantity %></div>
                          </div>
                        </li>
                      <% }); %>
                    <% }); %>
                  </ul>
                </div>
                <div class="checkout__order__total">
                  <ul>
                    <li>Subtotal <span>â‚¹ <%= subtotal.toFixed(2) %></span></li>
                    <li>Discount <span id="discount">â‚¹ 0</span></li>
                    <li class="<%= deliveryCharge === 0 ? 'strikethrough' : '' %>" >Delivery Charge 
                      <span id="deliveryCharge">
                        <% if (deliveryCharge === 0) { %>
                          <span style="color: green;">Free Delivery</span>
                        <% } else { %>
                          â‚¹ <%= deliveryCharge.toFixed(2) %>
                        <% } %>
                      </span>
                    </li>
                    
                    <li>Total <span id="totalAmount">â‚¹ <%= total.toFixed(2) %></span></li>
                  </ul>
                </div>
                
                <!-- Payment Method -->
                <div class="checkout__payment-method">
                  <h5>Payment Method</h5>
                  <!-- Cash on Delivery -->
                  <input type="radio" id="cashOnDelivery" name="paymentMethod" value="cashOnDelivery">
                  <label for="cashOnDelivery" id="codLabel">
                    <img width="34" height="34" src="https://img.icons8.com/external-flaticons-lineal-color-flat-icons/64/external-cash-on-delivery-web-store-flaticons-lineal-color-flat-icons.png" alt="external-cash-on-delivery-web-store-flaticons-lineal-color-flat-icons"/>
                    COD
                  </label>
                  <br>

                  <!-- Wallet -->
                  <input type="radio" id="wallet" name="paymentMethod" value="wallet">
                  <label for="wallet">
                    <img width="34" height="34" src="https://img.icons8.com/3d-fluency/94/card-wallet.png" alt="card-wallet"/>
                    Wallet
                  </label>
                  <br>
                  
                  <!-- Razorpay -->
                  <input type="radio" id="razorpay" name="paymentMethod" value="razorpay">
                  <label for="razorpay">
                    <a href="https://razorpay.com/" target="_blank"> <img referrerpolicy="origin" src = "https://badges.razorpay.com/badge-dark.png " style = "height: 34px; width: 40px;" alt = "Razorpay | Payment Gateway | Neobank"></a>                Razorpay
                  </label>
                </div>
                
                <!-- End Payment Method -->
                <button type="submit" class="site-btn">Place Order</button>
              </div>
            </div>
          </div>
        </form>
      
      </div>
    </div>
  </div>
</section>
<!-- Checkout Section End -->

<%- include('../layouts/footer') %>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const addressDetails = document.querySelectorAll('.checkout__address__details');
    addressDetails.forEach(function(addressDetail) {
        addressDetail.addEventListener('click', function(event) {
            event.preventDefault();
            toggleActive(addressDetail);
        });
    });

    checkTotalAmount();

    document.querySelector('.site-btn').addEventListener('click', handlePlaceOrder);
});

function toggleActive(element) {
    const addressDetails = document.querySelectorAll('.checkout__address__details');
    addressDetails.forEach(function(addressDetail) {
        addressDetail.classList.remove("active");
        addressDetail.style.backgroundColor = "";
        addressDetail.style.color = "";
        addressDetail.querySelector('input[type=radio]').checked = false;
    });

    element.classList.add("active");
    element.style.backgroundColor = "lightblue";
    element.style.color = "black";
    element.querySelector('input[type=radio]').checked = true;
}

function removeAddress(addressId) {
    Swal.fire({
        title: 'Are you sure?',
        text: "Do you really want to remove this address?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, remove it!'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch('/removeAddress/' + addressId, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire('Removed!', 'Your address has been removed.', 'success');
                    document.getElementById('address' + addressId).remove();
                } else {
                    Swal.fire('Failed!', 'Failed to remove address. Please try again.', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire('Error!', 'An error occurred. Please try again.', 'error');
            });
        }
    });
}

function checkTotalAmount() {
    const totalAmountElement = document.getElementById('totalAmount');
    const totalAmount = parseFloat(totalAmountElement.innerText.replace('â‚¹ ', '').replace(',', ''));
    const codOption = document.getElementById('cashOnDelivery');
    const codLabel = document.getElementById('codLabel');

    if (totalAmount > 1000) {
        codOption.disabled = true;
        codLabel.classList.add('strikethrough');
    } else {
        codOption.disabled = false;
        codLabel.classList.remove('strikethrough');
    }
}

function applyCoupon() {
    const couponCode = document.getElementById('couponCode').value;

    fetch('/applyCoupon', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ couponCode: couponCode })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const currentTotal = parseFloat(document.getElementById('totalAmount').innerText.replace('â‚¹ ', ''));
            const newTotal = currentTotal - data.discount;
            
            document.getElementById('totalAmount').innerText = `â‚¹ ${newTotal.toFixed(2)}`;
            document.getElementById('discount').innerText = `â‚¹ ${data.discount.toFixed(2)}`;
            
            Swal.fire('Success', 'Coupon applied successfully', 'success');
            checkTotalAmount();
        } else {
            Swal.fire('Error', data.message || 'Error applying coupon', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire('Error', 'An error occurred. Please try again.', 'error');
    });
}

function removeCoupon() {
    const couponCode = document.getElementById('couponCode').value;

    fetch('/removeCoupon', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ couponCode: couponCode })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const originalTotal = parseFloat('<%= subtotal %>') + parseFloat('<%= deliveryCharge %>'); // Use server-side values for original subtotal and delivery charge
            const originalDiscount = 0; // Assuming no discount initially
            
            document.getElementById('totalAmount').innerText = `â‚¹ ${originalTotal.toFixed(2)}`;
            document.getElementById('discount').innerText = `â‚¹ ${originalDiscount.toFixed(2)}`;
            document.getElementById('couponCode').value = '';
            
            Swal.fire('Success', 'Coupon removed successfully', 'success');
        } else {
            Swal.fire('Error', data.message || 'Error removing coupon', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire('Error', 'An error occurred. Please try again.', 'error');
    });
}
function handlePlaceOrder(e) {
    e.preventDefault();
    const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
    const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked')?.value;
    const deliveryChargeElement = document.getElementById('deliveryCharge');
    const deliveryCharge = parseFloat(deliveryChargeElement.innerText.replace('â‚¹ ', '').trim()) || 0;

    // Get subtotal, discount, and total
    const subtotalElement = document.querySelector('.checkout__order__total ul li:first-child span');
    const subtotal = parseFloat(subtotalElement.innerText.replace('â‚¹ ', '').trim());

    const discountElement = document.getElementById('discount');
    const discount = parseFloat(discountElement.innerText.replace('â‚¹ ', '').trim()) || 0;

    const totalElement = document.getElementById('totalAmount');
    const total = parseFloat(totalElement.innerText.replace('â‚¹ ', '').trim());

    if (!selectedAddress) {
        return Swal.fire('Error', 'Please select a delivery address.', 'error');
    }
    if (!paymentMethod) {
        return Swal.fire('Error', 'Please select a payment method.', 'error');
    }

    if (paymentMethod === 'razorpay') {
        handleRazorpayPayment(selectedAddress, deliveryCharge, subtotal, discount, total);
    } else {
        fetch('/placeOrder', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                selectedAddress: selectedAddress,
                paymentMethod: paymentMethod,
                deliveryCharge: deliveryCharge,
                subtotal: subtotal,
                discount: discount,
                total: total
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire('Success', 'Order placed successfully', 'success').then(() => {
                    window.location.replace('/orderplaced');
                });
            } else {
                Swal.fire('Error', data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire('Error', 'An error occurred. Please try again.', 'error');
        });
    }
}

async function handleRazorpayPayment(selectedAddress, deliveryCharge, subtotal, discount, total) {
    try {
        const response = await fetch('/placeOrder', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                selectedAddress: selectedAddress,
                paymentMethod: 'razorpay',
                deliveryCharge: deliveryCharge,
                subtotal: subtotal,
                discount: discount,
                total: total
            })
        });

        const data = await response.json();

        if (response.ok && data.success) {
            const options = {
                key: "<%= razorpay_id %>",
                amount: data.amount,
                currency: data.currency,
                name: "Nashifa",
                description: "Test Transaction",
                order_id: data.razorpayOrderId,
                handler: function (response) {
                    verifyPayment(response, data.orderId);
                },
                prefill: {
                    name: "<%= userData.name %>",
                    email: "<%= userData.email %>",
                    contact: "<%= userData.mobile %>"
                },
                theme: {
                    color: "#3399cc"
                },
                modal: {
                    ondismiss: function() {
                        setTimeout(() => {
                            showPaymentFailedAlert();
                        }, 300);
                    }
                }
            };
            const rzp1 = new Razorpay(options);
            rzp1.open();
        } else {
            showPaymentFailedAlert();
        }
    } catch (error) {
        console.error('Error:', error);
        showPaymentFailedAlert();
    }
}


function showPaymentFailedAlert() {
    Swal.fire({
        title: 'Payment Failed',
        text: 'The payment process was unsuccessful. Please try again.',
        icon: 'error',
        confirmButtonText: 'OK',
        timer: 5000, 
        timerProgressBar: true,
        didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer)
            toast.addEventListener('mouseleave', Swal.resumeTimer)
        }
    });
}

async function verifyPayment(response, orderId) {
    try {
        const verifyResponse = await fetch('/verifyRazorpayPayment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                razorpay_order_id: response.razorpay_order_id,
                razorpay_payment_id: response.razorpay_payment_id,
                razorpay_signature: response.razorpay_signature,
                orderId: orderId
            })
        });

        const verifyData = await verifyResponse.json();
        if (verifyData.success) {
            window.location.replace(`/orderplaced`);
        } else {
            showPaymentFailedAlert();
        }
    } catch (error) {
        console.error('Error:', error);
        showPaymentFailedAlert();
    }
}

function navigateToAddAddress(event) {
    event.preventDefault(); // Prevent any default action
    window.location.href = '/addNewAddress'; // Navigate to the add address page
}
</script>